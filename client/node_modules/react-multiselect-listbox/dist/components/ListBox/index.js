import React, { memo } from 'react';
import { FixedSizeList as List, areEqual } from 'react-window';
import { Droppable, Draggable } from 'react-beautiful-dnd';
import AutoSizer from 'react-virtualized-auto-sizer';
import ItemRow from '../ItemRow';
import styles from './styles.module.scss';

var ListBox = function ListBox(_ref) {
  var id = _ref.id,
      header = _ref.children,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      onItemClick = _ref.onItemClick,
      height = _ref.height,
      rowHeight = _ref.rowHeight,
      textField = _ref.textField,
      valueField = _ref.valueField,
      sortable = _ref.sortable;
  var Row = memo(function (_ref2) {
    var items = _ref2.data,
        index = _ref2.index,
        style = _ref2.style;
    var item = items[index];
    var props = {
      itemData: item,
      textField: textField,
      onItemClick: onItemClick,
      style: style
    };
    return sortable ? /*#__PURE__*/React.createElement(Draggable, {
      draggableId: item[valueField].toString(),
      index: index,
      key: item[valueField]
    }, function (provided) {
      return /*#__PURE__*/React.createElement(ItemRow, Object.assign({}, props, {
        provided: provided
      }));
    }) : /*#__PURE__*/React.createElement(ItemRow, props);
  }, areEqual);
  var listProps = {
    className: styles.container,
    height: height,
    itemCount: data.length,
    itemSize: rowHeight,
    itemData: data
  };
  return /*#__PURE__*/React.createElement("div", {
    className: styles.root
  }, header, /*#__PURE__*/React.createElement(AutoSizer, {
    disableHeight: true
  }, function (_ref3) {
    var width = _ref3.width;
    return sortable ? /*#__PURE__*/React.createElement(Droppable, {
      isDropDisabled: id === 'options',
      droppableId: id,
      mode: "virtual",
      renderClone: function renderClone(provided, snapshot, rubric) {
        var item = data[rubric.source.index];
        return /*#__PURE__*/React.createElement(ItemRow, {
          itemData: item,
          onItemClick: onItemClick,
          textField: textField,
          provided: provided,
          isDragging: snapshot.isDragging
        });
      }
    }, function (provided) {
      return /*#__PURE__*/React.createElement(List, Object.assign({}, listProps, {
        width: width,
        outerRef: provided.innerRef
      }), Row);
    }) : /*#__PURE__*/React.createElement(List, Object.assign({}, listProps, {
      width: width
    }), Row);
  }));
};

export default memo(ListBox);